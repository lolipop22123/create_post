import os
import re
import random
import asyncio

from config import bot, dp, admins, db

from telethon import TelegramClient, events
from dotenv import load_dotenv

from aiogram.dispatcher import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentTypes,
    MediaGroup,
    InputMediaPhoto
)

from app.keyboards import start_kb
from app.state import createPost, addChannel, timePosting, reposting, CreateSession
# from app.functions import parspost

load_dotenv()


@dp.callback_query_handler(text = 'settingspost')
async def settingspost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
            reply_markup=mkp
        )
    else:
        await call.message.answer(
            f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –±–æ—Ç–∞!'
        )


#–°–æ–∑–∞—Ç—å –ø–æ—Å—Ç 
@dp.callback_query_handler(text = 'createpost')
async def createpost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        mkp.add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancel_create'))
        await call.message.answer(
            f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:'
        )

        await createPost.text.set()


@dp.message_handler(state = createPost.text)
async def newTextPost(m:Message, state:FSMContext):
    text_post = m.text
    
    async with state.proxy() as data:
        data['text_post'] = text_post
        
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'–ì–æ—Ç–æ–≤–æ', callback_data=f'readyphoto')).add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancelphoto')).add(InlineKeyboardButton(f'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skipphoto'))
    
    await m.answer(
        f'–í—Å—Ç–∞–≤—Ç—å —Ñ–æ—Ç–æ:',
        reply_markup=mkp
    )
    
    await createPost.photo.set()


@dp.callback_query_handler(text = 'skipphoto', state = createPost.photo)
async def sckipPhoto(call:CallbackQuery, state:FSMContext):
    id_post = random.randint(100000, 999999)
    
    async with state.proxy() as data:
        photo_text = data['text_post']
    
    photo_ids = []
    
    try:
        db.create_post(id_post, photo_text, photo_ids)
        await call.message.answer(f'–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î!', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
            reply_markup=start_kb()
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(state=createPost.photo, content_types=ContentTypes.PHOTO)
async def handle_photo(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ
    async with state.proxy() as data:
        if 'photo_ids' not in data:
            data['photo_ids'] = []
        data['photo_ids'].append(photo_id)
        
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'–ì–æ—Ç–æ–≤–æ', callback_data=f'readyphoto')).add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancelphoto'))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
    await message.answer('–í—Å—Ç–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ", –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.', reply_markup=mkp)


@dp.callback_query_handler(text='readyphoto', state=createPost.photo)
async def finish_photos(call: Message, state: FSMContext):
    id_post = random.randint(100000, 999999)
    
    async with state.proxy() as data:
        photo_ids = data.get('photo_ids', [])
        photo_text = data['text_post']
   
    try:
        db.create_post(id_post, photo_text, photo_ids)
        await call.message.answer(f'–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î!', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
            reply_markup=start_kb()
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
@dp.callback_query_handler(text = 'delatepost')
async def delatepost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_post = db.get_all_posts()
        
        mkp = InlineKeyboardMarkup()
        for post in all_post:
            mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"deletepost_{post['id_post']}"))
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç –ø–æ—Å—Ç:', 
            reply_markup=mkp
        )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deletepost_'))
async def process_deletepost(call: CallbackQuery):
    user_id = call.from_user.id
    id_post = call.data.split('_')[1]

    try:
        info_post = db.get_post_by_id(int(id_post))
        photo_id = info_post['photo_ids']
        text = info_post['text']
        
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚ùå–£–¥–∞–ª–∏—Ç—å', callback_data=f'deletepostyes_{id_post}')
        btn2 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backallpost')
        mkp.add(btn1).add(btn2)
        
        if photo_id:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç MediaGroup
            media = [InputMediaPhoto(photo_id) for photo_id in photo_id]

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ
            media[-1].caption = text
            
            await bot.send_media_group(chat_id=user_id, media=media)
            await call.message.answer(
                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                reply_markup=mkp
            )
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
            reply_markup=start_kb()
        )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deletepostyes_'))
async def deletepostyes(call:CallbackQuery, state:FSMContext):
    post_id = call.data.split('_')[1]
        
    try:
        db.delete_post_by_id(int(post_id))
        await call.message.answer(f'–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ', reply_markup=start_kb())
    except Exception as e:
        print(e)
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=mkp)


# –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query_handler(text = 'backallpost')
async def backallpost(call:CallbackQuery, state:FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 2)
    
    user_id = call.from_user.id
    
    if user_id in admins:
        all_post = db.get_all_posts()
        
        mkp = InlineKeyboardMarkup()
        for post in all_post:
            mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"deletepost_{post['id_post']}"))
        mkp.add(InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu'))
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç –ø–æ—Å—Ç:', 
            reply_markup=mkp
        )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query_handler(text = 'addchannel')
async def addchannel(call:CallbackQuery, state:FSMContext):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'cancelchannel'))
        
        await call.message.answer(
            f'<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã:</b>',
            reply_markup=mkp
        )
        
        await addChannel.channel_id.set()
    

@dp.message_handler(state = addChannel.channel_id)
async def addChannelId(m:Message, state:FSMContext):
    channel_id = m.text
    
    async with state.proxy() as data:
        data['channel_id'] = channel_id
    
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'cancelchannel'))
    
    await m.answer(
        f'<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏):</b>',
        reply_markup=mkp
    )
    
    await addChannel.name.set()


@dp.message_handler(state = addChannel.name)
async def addChannelNameText(m:Message, state:FSMContext):
    name_channel = m.text
    
    async with state.proxy() as data:
        channel_id = data['channel_id']
    
    try:
        db.add_channel_posting(name_channel, channel_id)
        await m.answer(
            f'–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ',
            reply_markup=start_kb()
        )
    except Exception as e:
        print(e)
        await m.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=start_kb())
    
    await state.finish()


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler(text = 'deletechanel')
async def deletechanel(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_channel_info = db.get_all_channel_postings()
        
        mkp = InlineKeyboardMarkup()
        for id, name, channle_id in all_channel_info:
            mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'delid_{channle_id}'))
        mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'canceldelchannelid'))
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>',
            reply_markup=mkp
        )    
        

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delid_'))
async def delid(call:CallbackQuery, state:FSMContext):
    channle_id = call.data.split('_')[1]
    
    try:
        db.delete_channel_posting(channle_id)
        await call.message.answer(f'–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await call.message.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=start_kb())    


# –ù–ê—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'planposting')
async def planposting(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥', callback_data=f'settingsposting')
        btn2 = InlineKeyboardButton(f'üî¥–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞', callback_data=f'daleteposting')
        btn3 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=mkp)
        

@dp.callback_query_handler(text = 'settingsposting')        
async def settingsposting(call:CallbackQuery):
    all_post = db.get_all_posts()
        
    mkp = InlineKeyboardMarkup()
    for post in all_post:
        mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"postngsett_{post['id_post']}"))
    mkp.add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'backmenu'))

    await call.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç:',
        reply_markup=mkp
    )
    

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('postngsett_'))
async def postingsettings(call: CallbackQuery, state: FSMContext):
    id_post = call.data.split('_')[1]
    
    async with state.proxy() as data:
        data['id_post'] = id_post
        data['selected_days'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
    
    keyboard = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton('–ü–Ω', callback_data='day_Pn')
    btn2 = InlineKeyboardButton('–í—Ç', callback_data='day_Vt')
    btn3 = InlineKeyboardButton('–°—Ä', callback_data='day_Sr')
    btn4 = InlineKeyboardButton('–ß—Ç', callback_data='day_Cht')
    btn5 = InlineKeyboardButton('–ü—Ç', callback_data='day_Pt')
    btn6 = InlineKeyboardButton('–°–±', callback_data='day_Sb')
    btn7 = InlineKeyboardButton('–í—Å', callback_data='day_Vs')
    btn8 = InlineKeyboardButton(f'‚úÖ', callback_data=f'day_finish')
    btn9 = InlineKeyboardButton(f'üîª–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skipdata')
    keyboard.add(btn1, btn2).add(btn3, btn4).add(btn5, btn6, btn7).add(btn8).add(btn9)

    await call.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞:',
        reply_markup=keyboard
    )
    
@dp.callback_query_handler(text = 'skipdata')
async def skipdata(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00, 20:10):')
    
    await timePosting.time.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('day_'))
async def dayselect(call: CallbackQuery, state: FSMContext):
    day = call.data.split('_')[1]
    
    async with state.proxy() as data:
        if day == 'finish':
            selected_days = ', '.join(data['selected_days'])
            mkp = InlineKeyboardMarkup()
            btn1 = InlineKeyboardButton(f'üîª–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skiptime')
            mkp.add(btn1)
            
            await call.message.answer(
                f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏: {selected_days}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00, 20:10):',
                reply_markup=mkp
            )
            await timePosting.time.set()
        else:
            if day not in data['selected_days']:
                data['selected_days'].append(day)
            await call.answer(f'{day} –¥–æ–±–∞–≤–ª–µ–Ω.')


@dp.callback_query_handler(text = 'skiptime', state = timePosting.time)
async def timePostingSckip(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    time_posting = []
    async with state.proxy() as data:
        day =  data['selected_days']
        id_post = data['id_post']
        data['time_posting'] = time_posting

    new_list_day = []
    for i in day:
        if i == 'Pn':
            i = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        elif i == 'Vt':
            i = '–í—Ç–æ—Ä–Ω–∏–∫'
        elif i == 'Sr':
            i = '–°—Ä–µ–¥–∞'
        elif i == 'Cht':
            i = '–ß–µ—Ç–≤–µ—Ä–≥'
        elif i == 'Pt':
            i = '–ü—è—Ç–Ω–∏—Ü–∞'
        elif i == 'Sb':
            i = '–°—É–±–±–æ—Ç–∞'
        elif i == 'Vs':
            i = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        else:
            pass
        
        new_list_day.append(i)

    channle_posting = db.get_all_channel_postings()
    
    mkp = InlineKeyboardMarkup()
    for id, name, id_channel in channle_posting:
        mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'chanpost_{id_channel}'))
    mkp.add(InlineKeyboardButton(f'‚úÖ', callback_data=f'chanpost_finish'), InlineKeyboardButton(f'‚ùå', callback_data=f'cancel'))

    await call.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞:',
        reply_markup=mkp
    )
    

@dp.message_handler(state = timePosting.time)
async def timePostingTime(m:Message, state:FSMContext):
    time_posting = m.text
    
    async with state.proxy() as data:
        day =  data['selected_days']
        id_post = data['id_post']
        data['time_posting'] = time_posting
    
    new_list_day = []
    for i in day:
        if i == 'Pn':
            i = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        elif i == 'Vt':
            i = '–í—Ç–æ—Ä–Ω–∏–∫'
        elif i == 'Sr':
            i = '–°—Ä–µ–¥–∞'
        elif i == 'Cht':
            i = '–ß–µ—Ç–≤–µ—Ä–≥'
        elif i == 'Pt':
            i = '–ü—è—Ç–Ω–∏—Ü–∞'
        elif i == 'Sb':
            i = '–°—É–±–±–æ—Ç–∞'
        elif i == 'Vs':
            i = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        else:
            pass
        
        new_list_day.append(i)

    channle_posting = db.get_all_channel_postings()
    
    mkp = InlineKeyboardMarkup()
    for id, name, id_channel in channle_posting:
        mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'chanpost_{id_channel}'))
    mkp.add(InlineKeyboardButton(f'‚úÖ', callback_data=f'chanpost_finish'), InlineKeyboardButton(f'‚ùå', callback_data=f'cancel'))

    await m.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞:',
        reply_markup=mkp
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('chanpost_'), state = timePosting.time)
async def postset(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data == 'chanpost_finish':
            # –ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await finish_channel_selection(call, state)
        else:
            channel_id = call.data.split('_')[1]
            selected_channels = data.get('selected_channels', [])
            if channel_id not in selected_channels:
                selected_channels.append(channel_id)
                data['selected_channels'] = selected_channels
            await call.answer(f'–ö–∞–Ω–∞–ª —Å ID {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω.')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
async def finish_channel_selection(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    async with state.proxy() as data:
        selected_channels = data.get('selected_channels', [])
        day = data['selected_days']
        id_post = data['id_post']
        time_posting = data['time_posting']
    
    try:
        # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_plan_posting(id_post, time_posting, selected_channels, day)
        await call.message.answer(
            f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã‚úÖ',
            reply_markup=start_kb()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        )
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
            reply_markup=start_kb()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        )

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.finish()


# –£–¥–∞–ª–∞–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'daleteposting')
async def daleteposting(call:CallbackQuery,state:FSMContext):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_plan = db.get_all_plan_postings()
        dict_text = {}
        
        mkp = InlineKeyboardMarkup()
        for id, id_post, time, channel_id, days in all_plan:
            text_post = db.get_post_text(id_post)
            dict_text[id_post] = text_post
        
        if not dict_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã
            mkp = InlineKeyboardMarkup()
            btn1 = InlineKeyboardButton(f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥', callback_data=f'settingsposting')
            btn2 = InlineKeyboardButton(f'üî¥–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞', callback_data=f'daleteposting')
            btn3 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
            mkp.add(btn1).add(btn2).add(btn3)
            await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=mkp)
            return
        
        async with state.proxy() as data:
            data['dict_text'] = dict_text
            data['current_index'] = 0
            data['post_ids'] = list(dict_text.keys())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        await send_post_message(call.message, state)
    

async def send_post_message(message: Message, state: FSMContext):
    async with state.proxy() as data:
        current_index = data['current_index']
        post_ids = data['post_ids']
        dict_text = data['dict_text']
        current_post_id = post_ids[current_index]
        current_text = dict_text[current_post_id]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup()
        if current_index > 0:
            keyboard.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='prev_post'))
        if current_index < len(post_ids) - 1:
            keyboard.add(InlineKeyboardButton('‚û°Ô∏è', callback_data='next_post'))
        keyboard.add(InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_post_{current_post_id}'))
        keyboard.add(InlineKeyboardButton(f'üîô', callback_data=f'backsettingsposting'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(current_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('delete_post_'), state='*')
async def delete_post(call: CallbackQuery, state: FSMContext):
    post_id = int(call.data.split('_')[2])  
    print(post_id)
    try:
        db.delete_plan_posting(post_id)
        print(f'CONFIRM')
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        async with state.proxy() as data:
            data['post_ids'].remove(post_id)
            if data['current_index'] >= len(data['post_ids']):
                data['current_index'] -= 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
        await send_post_message(call.message, state)
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
            reply_markup=start_kb()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        )
        await state.finish()
    
    
@dp.callback_query_handler(lambda c: c.data in ['prev_post', 'next_post'], state='*')
async def navigate_posts(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data == 'prev_post':
            data['current_index'] -= 1
        elif call.data == 'next_post':
            data['current_index'] += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
    await send_post_message(call.message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å—ã–ª–∫–∏
@dp.callback_query_handler(text = 'replaceMessage')
async def replaceMessage(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚ûï–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã', callback_data=f'addpara')
        btn2 = InlineKeyboardButton(f'‚ûñ–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã', callback_data=f'removepara')
        btn3 = InlineKeyboardButton(f'üîò–ó–∞–ø—É—Å–∫', callback_data=f'readypara')
        btn4 = InlineKeyboardButton(f'üî¥–û—Å—Ç–∞–Ω–æ–≤–∫–∞', callback_data=f'cancelpara')
        btn5 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3, btn4).add(btn5)
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
            reply_markup=mkp
        )
        

@dp.callback_query_handler(text = 'readypara')
async def readypara(call:CallbackQuery, state:FSMContext):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_para = db.get_all_repostings()
        print(all_para)
        
        mkp = InlineKeyboardMarkup()
        for _, name, copy_id, post_id in all_para:
            mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'startpara|{copy_id}|{post_id}'))
        mkp.add(InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backreplacemessage'))
        
        await call.message.answer(
            f'–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:',
            reply_markup=mkp
        )


@dp.callback_query_handler(lambda c: c.data.startswith('startpara|'))
async def startpara(call:CallbackQuery, state:FSMContext):
    copy_id = call.data.split('|')[1]
    posting_id = call.data.split('|')[2]
    
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'‚úÖ–ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'readygood'), InlineKeyboardButton(f'‚≠ïÔ∏è–û—Ç–º–µ–Ω–∞', callback_data=f'cancelready'))

    async with state.proxy() as data:
        data['copy_id'] = copy_id
        data['posting_id'] = posting_id
    
    await call.message.answer(
        f'C {copy_id} –≤ {posting_id}\n\n–ó–∞–ø—É—Å—Ç–∏—Ç—å?',
        reply_markup=mkp
    )


# –ó–∞–ø–ø—É—Å–∫
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
tasks = []

async def parspost(api_id, api_hash, channel_username, my_channel):
    async with TelegramClient('session_name', api_id, api_hash) as client:
        @client.on(events.NewMessage(chats=channel_username))
        async def handler(event):
            message = event.message.message
            media = event.message.media
            
            print(message)
            print(media)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            if message:
                await client.send_message(my_channel, message)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ)
            if media:
                await client.send_file(my_channel, media, caption=message if message else None)

        # –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await client.run_until_disconnected()


async def start_parspost(api_id, api_hash, channel_username, my_channel):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫
    task = asyncio.create_task(parspost(api_id, api_hash, channel_username, my_channel))
    tasks.append(task)
    return task


@dp.callback_query_handler(text = 'readygood')
async def readygood(call:CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        copy_id = data['copy_id']
        posting_id = data['posting_id']
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º `parspost` –≤ —Ñ–æ–Ω–µ
    task = await start_parspost(os.getenv('api_id'), os.getenv('api_hash'), copy_id, int(posting_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    if task:
        await call.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!", reply_markup=start_kb())
    else:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        
    await state.finish()


# —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.callback_query_handler(text = 'cancelpara')
async def cancelpara(call:CallbackQuery, state:FSMContext):
    if tasks:
        mkp = InlineKeyboardMarkup()
        tasks_info = []
        
        for i, task in enumerate(tasks, 1):
            task_status = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" if not task.done() else "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
            tasks_info.append(f"–ó–∞–¥–∞—á–∞ {i}: {task_status}")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            mkp.add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ó–∞–¥–∞—á—É {i}', callback_data=f'delete_task_{i}'))
        
        tasks_text = "\n".join(tasks_info)
        await call.message.answer(f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n{tasks_text}", reply_markup=mkp)
    else:
        await call.message.answer("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_task_'))
async def delete_task(call: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_number = int(re.search(r'delete_task_(\d+)', call.data).group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if 1 <= task_number <= len(tasks):
        task = tasks[task_number - 1]
        
        if not task.done():
            task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            tasks.pop(task_number - 1)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
            
            await call.message.answer(f"–ó–∞–¥–∞—á–∞ {task_number} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await call.message.answer(f"–ó–∞–¥–∞—á–∞ {task_number} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await call.message.answer(f"–ó–∞–¥–∞—á–∞ {task_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –æ—Ç–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'cancelready')
async def cancelready(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    user_id = call.from_user.id
    
    if user_id in admins:
        all_para = db.get_all_repostings()
        print(all_para)
        
        mkp = InlineKeyboardMarkup()
        for _, name, copy_id, post_id in all_para:
            mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'startpara_{copy_id}_{post_id}'))
        mkp.add(InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backreplacemessage'))
        
        await call.message.answer(
            f'–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:',
            reply_markup=mkp
        )

        
# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã
@dp.callback_query_handler(text = 'backreplacemessage')
async def backreplacemessage(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚ûï–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã', callback_data=f'addpara')
        btn2 = InlineKeyboardButton(f'‚ûñ–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã', callback_data=f'removepara')
        btn3 = InlineKeyboardButton(f'üîò–ó–∞–ø—É—Å–∫', callback_data=f'readypara')
        btn4 = InlineKeyboardButton(f'üî¥–û—Å—Ç–∞–Ω–æ–≤–∫–∞', callback_data=f'cancelpara')
        btn5 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3, btn4).add(btn5)
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
            reply_markup=mkp
        )

      
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
@dp.callback_query_handler(text = 'addpara')
async def addpara(call:CallbackQuery):
    mkp = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'canceladd')
    mkp.add(btn1)
    
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø–æ—Å—Ç—ã:', reply_markup=mkp)

    await reposting.idCopy.set()
    

@dp.message_handler(state = reposting.idCopy)
async def repostingIdCopyText(m:Message, state:FSMContext):
    copy_id = m.text
    
    async with state.proxy() as data:
        data['copy_id'] = copy_id
    
    mkp = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'canceladd')
    mkp.add(btn1)
    
    await m.answer(f'–í–≤–µ–¥–∏—Ç –∞–π–¥–∏ –∫–∞–Ω–∞–ª –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç:', reply_markup=mkp)
    
    await reposting.idPosting.set()
    

@dp.message_handler(state = reposting.idPosting)
async def repostingIdPostingText(m:Message, state:FSMContext):
    posting_id = m.text
    
    async with state.proxy() as data:
        data['posting_id'] = posting_id
        
    mkp = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'canceladd')
    mkp.add(btn1)
    
    await m.answer(
        f'–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –ø–∞—Ä—ã:',
        reply_markup=mkp
    )
    
    await reposting.name.set()


@dp.message_handler(state = reposting.name)
async def nameTextRepost(m:Message, state:FSMContext):
    name = m.text
    
    async with state.proxy() as data:
        copy_id = data['copy_id'] 
        posting_id = data['posting_id']
    
    try:
        db.add_reposting(name, copy_id, posting_id)
        await m.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î‚úÖ', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await m.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§∑\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=start_kb())
    
    await state.finish()


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏
@dp.callback_query_handler(text = 'createsession')
async def createsession(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'canceladdsession'))
    
    await call.message.answer(f'–í—Å—Ç–∞–≤—Ç—å –≤–∞—à—É —Å–µ—Å—Å–∏—é, —Ñ–∞–π–ª:', reply_markup=mkp)

    await CreateSession.waiting_for_file.set()
    

@dp.message_handler(content_types=['document'], state = CreateSession.waiting_for_file)
async def fileSession(message:Message, state:FSMContext):
    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = message.document.file_name

    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_path = os.path.join(os.getcwd(), file_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, save_path)
    
    await message.answer(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.")

    await state.finish()


# –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏
@dp.callback_query_handler(text = 'canceladdsession', state = CreateSession.waiting_for_file)
async def CreateSessionCancel(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è!', reply_markup=start_kb())
    await state.finish()


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query_handler(text = 'canceladd', state=reposting.name)
@dp.callback_query_handler(text = 'canceladd', state=reposting.idCopy)
@dp.callback_query_handler(text = 'canceladd', state=reposting.idPosting)
async def repostingCopyId(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    user_id = call.from_user.id
        
    if user_id in admins:
        await call.message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!',
            reply_markup=start_kb()
        )
    
    await state.finish()


# –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'backsettingsposting')
async def backsettingsposting(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    mkp = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥', callback_data=f'settingsposting')
    btn2 = InlineKeyboardButton(f'üî¥–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞', callback_data=f'daleteposting')
    btn3 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
    mkp.add(btn1).add(btn2).add(btn3)
    
    await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=mkp)
    
    await state.finish()
    
    
# –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'cancel', state=timePosting.time)
async def timePostingCanel(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è!', reply_markup=start_kb())
    await state.finish()
    
    
# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query_handler(text = 'canceldelchannelid')
async def canceldelchannelid(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è!', reply_markup=start_kb())
    await state.finish()


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler(text = 'cancelchannel', state = addChannel.name)
@dp.callback_query_handler(text = 'cancelchannel', state = addChannel.channel_id)
async def cancelChannel(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!', reply_markup=start_kb())
    await state.finish()


# –ú–µ–Ω—é
@dp.callback_query_handler(text = 'backmenu')
async def backmenu(call:CallbackQuery, state:FSMContext):
    user_id = call.from_user.id
    
    await call.message.delete()
    
    if user_id in admins:
        await call.message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!',
            reply_markup=start_kb()
        )
    
    await state.finish()


# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query_handler(text = 'cancel_create', state = createPost.text)
async def cancel_create_post(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
            reply_markup=mkp
        )
    else:
        await call.message.answer(
            f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –±–æ—Ç–∞!'
        )
    
    await state.finish()