import random

from config import bot, dp, admins, db

from aiogram.dispatcher import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentTypes,
    MediaGroup,
    InputMediaPhoto
)

from app.keyboards import start_kb
from app.state import createPost, addChannel, timePosting


@dp.callback_query_handler(text = 'settingspost')
async def settingspost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
            reply_markup=mkp
        )
    else:
        await call.message.answer(
            f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –±–æ—Ç–∞!'
        )


#–°–æ–∑–∞—Ç—å –ø–æ—Å—Ç 
@dp.callback_query_handler(text = 'createpost')
async def createpost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        mkp.add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancel_create'))
        await call.message.answer(
            f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:'
        )

        await createPost.text.set()


@dp.message_handler(state = createPost.text)
async def newTextPost(m:Message, state:FSMContext):
    text_post = m.text
    
    async with state.proxy() as data:
        data['text_post'] = text_post
        
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'–ì–æ—Ç–æ–≤–æ', callback_data=f'readyphoto')).add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancelphoto'))
    
    await m.answer(
        f'–í—Å—Ç–∞–≤—Ç—å —Ñ–æ—Ç–æ:',
        reply_markup=mkp
    )
    
    await createPost.photo.set()

@dp.message_handler(state=createPost.photo, content_types=ContentTypes.PHOTO)
async def handle_photo(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ
    async with state.proxy() as data:
        if 'photo_ids' not in data:
            data['photo_ids'] = []
        data['photo_ids'].append(photo_id)
        
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'–ì–æ—Ç–æ–≤–æ', callback_data=f'readyphoto')).add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancelphoto'))
    
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
    await message.answer('–í—Å—Ç–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ", –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.', reply_markup=mkp)


@dp.callback_query_handler(text='readyphoto', state=createPost.photo)
async def finish_photos(call: Message, state: FSMContext):
    id_post = random.randint(100000, 999999)
    
    async with state.proxy() as data:
        photo_ids = data.get('photo_ids', [])
        photo_text = data['text_post']
   
    try:
        db.create_post(id_post, photo_text, photo_ids)
        await call.message.answer(f'–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î!', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
            reply_markup=start_kb()
        )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
@dp.callback_query_handler(text = 'delatepost')
async def delatepost(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_post = db.get_all_posts()
        
        mkp = InlineKeyboardMarkup()
        for post in all_post:
            mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"deletepost_{post['id_post']}"))
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç –ø–æ—Å—Ç:', 
            reply_markup=mkp
        )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deletepost_'))
async def process_deletepost(call: CallbackQuery):
    user_id = call.from_user.id
    id_post = call.data.split('_')[1]

    try:
        info_post = db.get_post_by_id(int(id_post))
        photo_id = info_post['photo_ids']
        text = info_post['text']
        
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚ùå–£–¥–∞–ª–∏—Ç—å', callback_data=f'deletepostyes_{id_post}')
        btn2 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backallpost')
        mkp.add(btn1).add(btn2)
        
        if photo_id:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç MediaGroup
            media = [InputMediaPhoto(photo_id) for photo_id in photo_id]

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ
            media[-1].caption = text
            
            await bot.send_media_group(chat_id=user_id, media=media)
            await call.message.answer(
                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                reply_markup=mkp
            )
    except Exception as e:
        print(e)
        await call.message.answer(
            f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
            reply_markup=start_kb()
        )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deletepostyes_'))
async def deletepostyes(call:CallbackQuery, state:FSMContext):
    post_id = call.data.split('_')[1]
        
    try:
        db.delete_post_by_id(int(post_id))
        await call.message.answer(f'–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ', reply_markup=start_kb())
    except Exception as e:
        print(e)
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=mkp)


# –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query_handler(text = 'backallpost')
async def backallpost(call:CallbackQuery, state:FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 2)
    
    user_id = call.from_user.id
    
    if user_id in admins:
        all_post = db.get_all_posts()
        
        mkp = InlineKeyboardMarkup()
        for post in all_post:
            mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"deletepost_{post['id_post']}"))
        mkp.add(InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu'))
        
        await call.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç –ø–æ—Å—Ç:', 
            reply_markup=mkp
        )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query_handler(text = 'addchannel')
async def addchannel(call:CallbackQuery, state:FSMContext):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'cancelchannel'))
        
        await call.message.answer(
            f'<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã:</b>',
            reply_markup=mkp
        )
        
        await addChannel.channel_id.set()
    

@dp.message_handler(state = addChannel.channel_id)
async def addChannelId(m:Message, state:FSMContext):
    channel_id = m.text
    
    async with state.proxy() as data:
        data['channel_id'] = channel_id
    
    mkp = InlineKeyboardMarkup()
    mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'cancelchannel'))
    
    await m.answer(
        f'<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏):</b>',
        reply_markup=mkp
    )
    
    await addChannel.name.set()


@dp.message_handler(state = addChannel.name)
async def addChannelNameText(m:Message, state:FSMContext):
    name_channel = m.text
    
    async with state.proxy() as data:
        channel_id = data['channel_id']
    
    try:
        db.add_channel_posting(name_channel, channel_id)
        await m.answer(
            f'–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ',
            reply_markup=start_kb()
        )
    except Exception as e:
        print(e)
        await m.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=start_kb())
    
    await state.finish()


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler(text = 'deletechanel')
async def deletechanel(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        all_channel_info = db.get_all_channel_postings()
        
        mkp = InlineKeyboardMarkup()
        for id, name, channle_id in all_channel_info:
            mkp.add(InlineKeyboardButton(f'{name}', callback_data=f'delid_{channle_id}'))
        mkp.add(InlineKeyboardButton(f'‚ùå–û—Ç–º–µ–Ω–∞', callback_data=f'canceldelchannelid'))
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>',
            reply_markup=mkp
        )    
        

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delid_'))
async def delid(call:CallbackQuery, state:FSMContext):
    channle_id = call.data.split('_')[1]
    
    try:
        db.delete_channel_posting(channle_id)
        await call.message.answer(f'–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=start_kb())
    except Exception as e:
        print(e)
        await call.message.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=start_kb())    


# –ù–ê—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(text = 'planposting')
async def planposting(call:CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥', callback_data=f'settingsposting')
        btn2 = InlineKeyboardButton(f'üëà–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2)
        
        await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=mkp)
        

@dp.callback_query_handler(text = 'settingsposting')        
async def settingsposting(call:CallbackQuery):
    all_post = db.get_all_posts()
        
    mkp = InlineKeyboardMarkup()
    for post in all_post:
        mkp.add(InlineKeyboardButton(f"{post['id_post']}", callback_data=f"postngsett_{post['id_post']}"))
    mkp.add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'backmenu'))

    await call.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç:',
        reply_markup=mkp
    )
    

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('postngsett_'))
async def postingsettings(call:CallbackQuery, state:FSMContext):
    id_post = call.data.split('_')[1]
    
    async with state.proxy() as data:
        data['id_post'] = id_post
    
    keyboard = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton('–ü–Ω', callback_data='day_Pn')
    btn2 = InlineKeyboardButton('–í—Ç', callback_data='day_Vt')
    btn3 = InlineKeyboardButton('–°—Ä', callback_data='day_Sr')
    btn4 = InlineKeyboardButton('–ß—Ç', callback_data='day_Cht')
    btn5 = InlineKeyboardButton('–ü—Ç', callback_data='day_Pt')
    btn6 = InlineKeyboardButton('–°–±', callback_data='day_Sb')
    btn7 = InlineKeyboardButton('–í—Å', callback_data='day_Vs')
    btn8 = InlineKeyboardButton(f'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'day_skipday')
    keyboard.add(btn1, btn2).add(btn3, btn4).add(btn5, btn6, btn7).add(btn8)

    await call.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('day_'))
async def dayselect(call:CallbackQuery, state:FSMContext):
    day = call.data.split('_')[1]
    
    async with state.proxy() as data:
        data['day'] = day
    
    
    mkp = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'cancel')
    btn2 = InlineKeyboardButton(f'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'sckiptime')
    mkp.add(btn1, btn2)
    
    await call.message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (10:00, 20:10):',
        reply_markup=mkp
    )
    
    await timePosting.time.set()


@dp.message_handler(state = timePosting.time)
async def timePostingTime(m:Message, state:FSMContext):
    time_posting = m.text
    
    async with state.proxy() as data:
        day = data['day'] 
        id_post = data['id_post']
    
    
# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query_handler(text = 'canceldelchannelid')
async def canceldelchannelid(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è!', reply_markup=start_kb())
    await state.finish()


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler(text = 'cancelchannel', state = addChannel.name)
@dp.callback_query_handler(text = 'cancelchannel', state = addChannel.channel_id)
async def cancelChannel(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!', reply_markup=start_kb())
    await state.finish()


# –ú–µ–Ω—é
@dp.callback_query_handler(text = 'backmenu')
async def backmenu(call:CallbackQuery, state:FSMContext):
    user_id = call.from_user.id
    
    await call.message.delete()
    
    if user_id in admins:
        await call.message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!',
            reply_markup=start_kb()
        )
    
    await state.finish()


# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query_handler(text = 'cancel_create', state = createPost.text)
async def cancel_create_post(call:CallbackQuery, state:FSMContext):
    await call.message.delete()
    
    user_id = call.from_user.id
    
    if user_id in admins:
        mkp = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(f'–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'createpost')
        btn2 = InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'delatepost')
        btn3 = InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'backmenu')
        mkp.add(btn1).add(btn2).add(btn3)
        
        await call.message.answer(
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
            reply_markup=mkp
        )
    else:
        await call.message.answer(
            f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –±–æ—Ç–∞!'
        )
    
    await state.finish()